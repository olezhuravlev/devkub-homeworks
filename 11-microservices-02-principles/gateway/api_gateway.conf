# The file defines the virtual server that exposes NGINX as an API gateway to clients.

# Servers to use.
include api_backends.conf;

server {
    access_log /var/log/nginx/api_access.log main; # Each API may also log to a separate file.

    listen 443 ssl;

    # "server_name" defines in which "server" block certain request will be processed.
    server_name gateway;

    # TLS config
    ssl_certificate      /etc/ssl/certs/my_cert.crt;
    ssl_certificate_key  /etc/ssl/private/my_cert.key;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  5m;
    ssl_ciphers          HIGH:!aNULL:!MD5;
    ssl_protocols        TLSv1.2 TLSv1.3;

    # API definitions, one per file.
    include /etc/nginx/api_conf.d/*.conf;

    # Error handling.

    # Treat invalid paths as bad requests - specifies that when a request does not match any
    # of the API definitions, NGINX returns the 400 (Bad Request) error instead of
    # the default 404 (Not Found) error.
    # This (optional) behavior requires that API clients make requests only to the valid URIs
    # included in the API documentation, and prevents unauthorized clients from
    # discovering the URI structure of the APIs published through the API gateway.
    error_page 404 = @400;

    # Do not send backend errors to client - adds a further level of protection
    # by sending a standardized error response to the client
    # (unhandled exceptions may contain stack traces or other sensitive data
    # that we donâ€™t want to be sent to the client).
    proxy_intercept_errors on;

    # Client-friendly JSON errors.
    # The complete list of standardized error responses is defined in a separate configuration file.
    include api_json_errors.conf;

    # If no content-type, assume JSON
    default_type application/json;
}
